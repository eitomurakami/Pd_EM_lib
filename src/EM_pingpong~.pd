#N canvas -11 -11 1920 970 12;
#X obj 360 178 s~ \$0deltime;
#X obj 472 177 s~ \$0delfeedback;
#X obj 834 178 s~ \$0dellevel;
#X obj 360 147 clip~ 0 1000;
#X obj 472 148 clip~ 0 1;
#X obj 834 149 clip~ 0 1;
#N canvas -11 -11 1920 970 left 0;
#X obj 37 58 inlet~;
#X obj 78 255 r~ \$0deltime;
#X obj 38 535 *~;
#X obj 56 631 r~ \$0dellevel;
#X obj 56 508 r~ \$0delfeedback;
#X obj 78 282 *~ 2;
#X obj 37 141 r~ \$0deltime;
#X obj 38 694 outlet~;
#X obj 244 117 sel 0 1;
#X msg 244 151 1;
#X msg 283 150 2;
#X obj 37 175 *~;
#X obj 244 83 r \$0deldirection;
#X obj 37 92 delwrite~ \$0shiftL 5000;
#X obj 37 204 delread4~ \$0shiftL;
#X obj 58 579 delwrite~ \$0bufferL 5000;
#X obj 78 311 delread4~ \$0bufferL;
#X text 177 255 <-deltime*2 for each channel;
#X text 35 21 This subpatch is the left channel of stereo delay;
#X text 98 695 <-dry(shifted) + wet signals;
#X text 320 150 <-If Left (==0) \, delay the signal by deltime(ms).
If Right (==1) \, delay the signal by deltime*2.;
#X obj 38 658 *~;
#X obj 133 360 r~ \$0delbit;
#X text 155 387 <-bitcrusher;
#X text 98 467 <-low pass filter;
#X obj 63 425 r~ \$0delcutoff;
#X obj 38 389 EM_bitcrusher~;
#X obj 38 466 EM_4lpf~;
#X connect 0 0 13 0;
#X connect 1 0 5 0;
#X connect 2 0 15 0;
#X connect 2 0 21 0;
#X connect 3 0 21 1;
#X connect 4 0 2 1;
#X connect 5 0 16 0;
#X connect 6 0 11 0;
#X connect 8 0 9 0;
#X connect 8 1 10 0;
#X connect 9 0 11 1;
#X connect 10 0 11 1;
#X connect 11 0 14 0;
#X connect 12 0 8 0;
#X connect 14 0 26 0;
#X connect 16 0 26 0;
#X connect 21 0 7 0;
#X connect 22 0 26 1;
#X connect 25 0 27 1;
#X connect 26 0 27 0;
#X connect 27 0 2 0;
#X restore 170 172 pd left;
#X obj 152 273 +~;
#X obj 253 270 +~;
#N canvas -11 -11 1920 970 right 0;
#X obj 37 58 inlet~;
#X obj 37 141 r~ \$0deltime;
#X obj 38 687 outlet~;
#X obj 244 117 sel 0 1;
#X obj 37 175 *~;
#X obj 244 83 r \$0deldirection;
#X text 98 688 <-dry(shifted) + wet signals;
#X text 35 21 This subpatch is the right channel of stereo delay;
#X obj 37 92 delwrite~ \$0shiftR 5000;
#X obj 37 205 delread4~ \$0shiftR;
#X msg 283 150 1;
#X msg 244 151 2;
#X text 320 150 <-If Right (==1) \, delay the signal by deltime(ms).
If Left (==0) \, delay the signal by deltime*2.;
#X obj 78 255 r~ \$0deltime;
#X obj 38 525 *~;
#X obj 56 621 r~ \$0dellevel;
#X obj 56 498 r~ \$0delfeedback;
#X obj 78 282 *~ 2;
#X text 177 255 <-deltime*2 for each channel;
#X obj 38 648 *~;
#X obj 132 360 r~ \$0delbit;
#X text 155 387 <-bitcrusher;
#X text 98 467 <-low pass filter;
#X obj 63 425 r~ \$0delcutoff;
#X obj 78 311 delread4~ \$0bufferR;
#X obj 58 569 delwrite~ \$0bufferR 5000;
#X obj 38 389 EM_bitcrusher~;
#X obj 38 466 EM_4lpf~;
#X connect 0 0 8 0;
#X connect 1 0 4 0;
#X connect 3 0 11 0;
#X connect 3 1 10 0;
#X connect 4 0 9 0;
#X connect 5 0 3 0;
#X connect 9 0 26 0;
#X connect 10 0 4 1;
#X connect 11 0 4 1;
#X connect 13 0 17 0;
#X connect 14 0 19 0;
#X connect 14 0 25 0;
#X connect 15 0 19 1;
#X connect 16 0 14 1;
#X connect 17 0 24 0;
#X connect 19 0 2 0;
#X connect 20 0 26 1;
#X connect 23 0 27 1;
#X connect 24 0 26 0;
#X connect 26 0 27 0;
#X connect 27 0 14 0;
#X restore 271 170 pd right;
#X obj 31 129 *~ 0.5;
#X obj 31 220 *~;
#X obj 49 161 r~ \$0dellevel;
#X obj 49 192 expr~ 1-$v1;
#X obj 712 178 s~ \$0delcutoff;
#X obj 31 65 inlet~;
#X text 30 43 audio in;
#X obj 152 311 outlet~;
#X obj 253 310 outlet~;
#X obj 360 34 loadbang;
#X obj 360 62 f \$1;
#X obj 360 89 inlet~;
#X obj 472 34 loadbang;
#X obj 472 89 inlet~;
#X obj 472 62 f \$2;
#X obj 834 37 loadbang;
#X obj 834 90 inlet~;
#X obj 607 37 loadbang;
#X obj 607 93 inlet~;
#X obj 607 147 clip~ 0 1;
#X obj 607 178 s~ \$0delbit;
#X obj 712 40 loadbang;
#X obj 712 94 inlet~;
#X obj 712 148 clip~ 0 20000;
#X obj 954 178 s \$0deldirection;
#X obj 954 73 inlet;
#X obj 1011 46 loadbang;
#X obj 954 107 i;
#X obj 954 147 clip 0 1;
#X obj 607 64 f \$3;
#X obj 712 67 f \$4;
#X obj 834 65 f \$5;
#X text 22 375 Eito Murakami - EM_pingpong~ (05/22/21);
#X obj 360 117 lop~ 100;
#X obj 472 118 lop~ 100;
#X obj 834 119 lop~ 100;
#X obj 1011 74 f \$6;
#X text 22 400 (A ping pong delay with bitcrusher and low pass filter
in the feedback loop);
#X connect 3 0 0 0;
#X connect 4 0 1 0;
#X connect 5 0 2 0;
#X connect 6 0 7 1;
#X connect 7 0 17 0;
#X connect 8 0 18 0;
#X connect 9 0 8 1;
#X connect 10 0 11 0;
#X connect 11 0 7 0;
#X connect 11 0 8 0;
#X connect 12 0 13 0;
#X connect 13 0 11 1;
#X connect 15 0 6 0;
#X connect 15 0 9 0;
#X connect 15 0 10 0;
#X connect 19 0 20 0;
#X connect 20 0 21 0;
#X connect 21 0 43 0;
#X connect 22 0 24 0;
#X connect 23 0 44 0;
#X connect 24 0 23 0;
#X connect 25 0 41 0;
#X connect 26 0 45 0;
#X connect 27 0 39 0;
#X connect 28 0 29 0;
#X connect 29 0 30 0;
#X connect 31 0 40 0;
#X connect 32 0 33 0;
#X connect 33 0 14 0;
#X connect 35 0 37 0;
#X connect 36 0 46 0;
#X connect 37 0 38 0;
#X connect 38 0 34 0;
#X connect 39 0 28 0;
#X connect 40 0 32 0;
#X connect 41 0 26 0;
#X connect 43 0 3 0;
#X connect 44 0 4 0;
#X connect 45 0 5 0;
#X connect 46 0 37 0;
